
.. _program_listing_file__mnt_d_Programation_C++_TextIndexing_backend_src_TA.cpp:

Program Listing for File TA.cpp
===============================

|exhale_lsh| :ref:`Return to documentation for file <file__mnt_d_Programation_C++_TextIndexing_backend_src_TA.cpp>` (``/mnt/d/Programation/C++/TextIndexing/backend/src/TA.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include "TA.h"
   using namespace std;
   inline bool sortinrev(const TA::TS &a,const TA::TS &b){
       return ((a.score > b.score) ||(a.score == b.score && a.d<b.d));
   }
   void TA::removeC(int k) {
       sort(C.begin(),C.end(),sortinrev);
       while((int)C.size()>k){
           C.erase(C.end()-1);
       }
   }
   double TA::calculScore(TF pl,vector<vector<TF>> &tab){
       double sum = 0.0;
       for ( const auto &row : tab ){
          for ( const auto &s : row ){
              if(s.d==pl.d){
                  sum += s.frequency;
              }
          }
       }
       return sum/tab.size();
   }
   void TA::InsertC(TF pl, vector<vector<TF>> &tab) {
       bool flag=true;
       for(TS itPL:C){
           if(itPL.d==pl.d){
               flag=false;
           }
       }
       if(flag){
           TS TS={pl.d,calculScore(pl,tab)};
           C.push_back(TS);
       }
   }
   void TA::display_vector(const vector<int> &v){
       std::copy(v.begin(), v.end(),
           std::ostream_iterator<int>(std::cout, " "));
       cout<<endl;
   }
   void TA::displayC(){
       for(int i=0;i<(int)C.size();i++){
           cout<<C.at(i).d<<" "<<C.at(i).score<<"; ";
       }
       cout<<endl;
   }
   
   void TA::displayTab(vector<vector<TF>> &tab){
       for(vector<TF> vpl: tab){
           for(TF pl: vpl){
               cout<<pl.d<<" "<<pl.frequency<<"; ";
           }
       }
       cout<<endl;
   }
   bool TA::kDocT(int k){
       int i=0;
       for(TS TS: C){
           if(TS.score>=t){
               i++;
           }
           if (i>=k) return false;
       }
       return true;
   }
   void TA::sortedAccess(int row,vector<vector<TF>> &tab){
       t=0;
       for(vector<TF> vpl:tab){
           t=t+vpl.at(row).frequency;
       }
       t=t/tab.size();
   }
   /*
    * At each sequential access
       (a) Set the threshold t to be the aggregate of the scores seen in this access.
       (b) Do random accesses and compute the scores of the seen objects.
       (c) Maintain a list of top-k objects seen so far
       (d) Stop, when the scores of the top-k are greater or equal to the threshold.
   
    * */
   void TA::step1(int k,vector<vector<TF>> &tab){
       int row=0;
       if (k>tab.at(0).size()){
           for (TF tf1:tab.at(0)){
               C.push_back({tf1.d,calculScore(tf1,tab)});
           }
       }
       else{
           while(kDocT(k)){
               TF pl;
               sortedAccess(row,tab);
               for (vector<TF> qt: tab){
                   pl=qt.at(row);
                   InsertC(pl,tab);
               }
               removeC(k);
               row++;
           }
       }
   }
   /*
    * 2. Return the top-k seen so far
    * */
   void TA::step2(int k){
       result.clear();
       sort(C.begin(), C.end(), sortinrev);
       for(int i=0;i<k;i++){
           if(i<C.size()){
               result.push_back(C.at(i));
           }
       }
       C.clear();
       C=result;
   }
   
   vector<TA::TS> TA::TAlgo(int k,vector<vector<TF>> &tab){
       step1(k,tab);
       step2(k);
       //return result;
       return C;
   }
